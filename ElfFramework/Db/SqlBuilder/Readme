呵呵哒

以下情况被视为一个'因子'，
a=1
b like 2
c !=3
d between 10 and 100
(a=1 and b=2)
(a=1 or b=2)
(a=1 or (b=2 and c=3))...依次可以无限递归嵌套下去。。。

填写因子时，直接用key value，如果该因子有OR链接，则为or =>[因子1，因子2]
如上面的因子转换如下：
'a' => 1
'b like' => 2
'c !=' => 3
'd between' => [10, 100]

'and'=> [
	'a' => 1,
	'b' => 2
]

'or'=> [
	'a'	=> 1,
	'b' => 2
]

'or'=> [
	'a' => 1,
	'and' => [
		'b' => 2,
		'c' => 3
	]
]



select * from biao1 where a=1 AND b=2 OR c=3;
eg1:	select * from biao1 where (a=1 AND b=2) OR c=3;
eg2:	select * from biao1 where a=1 AND (b=2 OR c=3);


eg1:
->where(
	[
		'OR'	=> [
			[['a' => 1], ['b' => 2]],
			['c' => 3]
		]
	]
	
);


eg2:
->where(
	[
		['a' => 1],
		[
			'OR'	=> [
				['b' => 2],
				['c' => 3]
			]
		]
	]
);


->where(
	[
		'AND'	=> [
			['a' => 1],
			[
				'OR'	=> [
					['b' => 2],
					['c' => 3]
				]
			]
		]
	]
);

改良版
->where([
	'a' => 1,
	'OR'	=> [
		'b between' => [1,100],
		'c like' => 3
	]
]);



eg3:
select * from biao1 where a=1 OR (b=2 AND c=3 AND d=4);
eg4:
select * from biao1 where (a=1 OR b=2) AND (c=3 AND d=4);

eg3:
->where([
	'OR'	=> [
		'a' => 1,
		'AND'	=> [
			'b'	=> 2,
			'c'	=> 3,
			'd'	=> 4
		]
	]
]);

->where([
	'OR'	=> [
		'a'	=> 1,
		[
			'b'	=> 2,
			'c'	=> 3,
			'd'	=> 4
		]
	]
]);

eg4:
->where([
	'AND'	=> [
		'OR'=> [
			'a'	=> 1,
			'b'	=> 2
		],
		'AND'=>[
			'c'	=> 3,
			'd'	=> 4
		]
	]
]);

->where([
	'OR'	=> [
		'a'	=> 1,
		'b' => 2
	],
	'c'	=> 3,
	'd'	=> 4
]);


eg5:
select * from biao1 where a=1 OR (b=2 AND (c=3 OR d=4));

eg5:
->where([
	'or'	=> [
		'a' => 1,
		'and' => [
			'b' => 2,
			'or'=> [
				'c' => 3,
				'd' => 4
			]
		]
	]
]);

->where([
	'or'	=> [
		'a' => 1,
		'b'	=> 2,
		'or'=> [
			'c' => 3,
			'd' => 4
		]
	]
]);

改良版:
->where([
	'or'	=> [
		'a' => 1,
		[
			'b' =>2,
			'or'=> [
				'c' => 3,
				'd' => 4
			]
		]
	]
]);

eg6:
select * from biao1 where a=1 AND b=2 AND c=3 AND d=4;
eg6:
->where([
	['a' => 1],
	['b' => 2],
	[]..
	[].
]);

->where([
	'a'	=> 1,
	'b'	=> 2,
	'c'..
	'd'.
]);


eg7:
select * from biao1 where a=1 OR b=2 OR c=3 OR d=4;

eg7:
->where([
	'or' => [
		'a' => 1,
		'b' => 2,
		'c' => 3
	]
]);


WHERE `seller_id` = 1 AND `del_state` = 1 AND ((`date_info_type` = 2) OR (((`date_info_type` = 1) AND (`begin` >= '1466497533') AND (`end` <= '1466497533'))))



eg8:
select * from biao1 where a=1 OR b=2;

eg8:
->where([
	'or' => [
		'a' => 1,
		'b' => 2
	]

]);


eg9:
select * from biao1 where (a=1 OR b=2 OR c=3) AND d=4;
eg10;
select * from biao1 where (a=1 OR b=2) OR (c=3 AND d=4);

eg9:
->where([
	'or'=> [
		'a' => 1,
		'b' => 2,
		'c' => 3
	]
	'd' => 4,
]);
或者
->where([
	'and' => [
		'or'=> [
			'a' => 1,
			'b' => 2,
			'c' => 3
		]
		'd' => 4,
	]
]);

eg10:
->where([
	'or' => [
		'or' => [
			'a' => 1,
			'b' => 2
		],
		[
			'c' => 3,
			'd' => 4
		]
	]
]);
或者
->where([
	'or' => [
		'or' => [
			'a' => 1,
			'b' => 2
		],
		'and'=> [
			'c' => 3,
			'd' => 4
		]
	]
]);


******************************************************************************************************************************

where最终版：
eg1:
->where([
		'a like' => '%333%%',
		'b between'=> [10,100],
		'c ' => 4,
		'd <=' => 'adsfasdfasdfasdfasdfsdf'
	]);

sql:
a like :a AND b between :b_start and :b_end AND c  = :c  AND d <= :d

param:
array (size=5)
  0 => 
    array (size=2)
      'column' => string ':a' (length=2)
      'value' => string '%333%%' (length=6)
  1 => 
    array (size=2)
      'column' => string ':b_start' (length=8)
      'value' => int 10
  2 => 
    array (size=2)
      'column' => string ':b_end' (length=6)
      'value' => int 100
  3 => 
    array (size=2)
      'column' => string ':c ' (length=3)
      'value' => int 4
  4 => 
    array (size=2)
      'column' => string ':d' (length=2)
      'value' => string 'adsfasdfasdfasdfasdfsdf' (length=23)




eg2:
->where([
		'a' => 2343,
		'b' => 33
	]);

sql:
a = :a AND b = :b

param:
array (size=2)
  0 => 
    array (size=2)
      'column' => string ':a' (length=2)
      'value' => int 2343
  1 => 
    array (size=2)
      'column' => string ':b' (length=2)
      'value' => int 33




eg3:
->where([
		'a' => 2343,
		'or'=> [
			'b' => 3,
			'c' => 3
		]
	]);

sql:
a = :a AND (b = :b OR c = :c)

param:
array (size=3)
  0 => 
    array (size=2)
      'column' => string ':a' (length=2)
      'value' => int 2343
  1 => 
    array (size=2)
      'column' => string ':b' (length=2)
      'value' => int 3
  2 => 
    array (size=2)
      'column' => string ':c' (length=2)
      'value' => int 3




eg4:
->where([
		'or' => [
			[
				'a' => 234,
				'b' => 3
			],
			'c' => 3
		]
	]);

sql:
((a = :a AND b = :b) OR c = :c

param:
array (size=3)
  0 => 
    array (size=2)
      'column' => string ':a' (length=2)
      'value' => int 234
  1 => 
    array (size=2)
      'column' => string ':b' (length=2)
      'value' => int 3
  2 => 
    array (size=2)
      'column' => string ':c' (length=2)
      'value' => int 3

或者用这种方式(这种方式需要开发者确定label(label是指:a、:b这些prepare后的column)不能重复)：
->where('a=:a and b=:b')
->bindValue([':a' => 234, ':b' => 3]);

sql:
a=:a and b=:b

param:
array (size=2)
  0 => 
    array (size=2)
      'column' => string ':a' (length=2)
      'value' => int 234
  1 => 
    array (size=2)
      'column' => string ':b' (length=2)
      'value' => int 3


insert 最终版:

$fieldsValues = [
	'code'			=> 234,
	'population' 	=> 3222
];

$sql = $this->sql()->insert($this->tableName)->values($fieldsValues);

var_dump($sql->getParam());
var_dump($sql->getSql());
var_dump($sql->getType());

$result = $this->connect()->execute($sql);

返回的是last insert id


delete 最终版：

$sql = $this->sql()->delete()->from($this->tableName)->where($where);

$result = $this->connect()->execute($sql);

如果想删除全部，请使用deleteAll()，因为delete()的链式操作中不允许where为空。
deleteAll和delete方法使用以及效果一模一样，只不过deleteAll可以删除全部数据。

$sql = $this->sql()->deleteAll()->from($this->tableName)->where($where);


